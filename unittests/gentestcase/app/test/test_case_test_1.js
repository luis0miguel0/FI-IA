// This test file was generated by Bito, see more on https://github.com/gitbito/AI-Automation

const { sum } = require('./test.test');

describe('sum function', () => {
  // Happy Path Tests
  describe('Happy Path', () => {
    test('adds two positive numbers correctly', () => {
      expect(sum(2, 3)).toBe(5);
      expect(sum(10, 5)).toBe(15);
      expect(sum(100, 200)).toBe(300);
    });

    test('adds a positive and a negative number correctly', () => {
      expect(sum(5, -3)).toBe(2);
      expect(sum(-10, 7)).toBe(-3);
    });

    test('adds two negative numbers correctly', () => {
      expect(sum(-2, -3)).toBe(-5);
      expect(sum(-10, -5)).toBe(-15);
    });

    test('adds zero to a number correctly', () => {
      expect(sum(0, 5)).toBe(5);
      expect(sum(10, 0)).toBe(10);
      expect(sum(0, 0)).toBe(0);
    });

    test('adds decimal numbers correctly', () => {
      expect(sum(1.5, 2.5)).toBeCloseTo(4);
      expect(sum(0.1, 0.2)).toBeCloseTo(0.3);
    });

    test('handles large numbers correctly', () => {
      expect(sum(Number.MAX_SAFE_INTEGER, 1)).toBe(Number.MAX_SAFE_INTEGER + 1);
      expect(sum(Number.MIN_SAFE_INTEGER, -1)).toBe(Number.MIN_SAFE_INTEGER - 1);
    });

    test('coerces string inputs to numbers', () => {
      expect(sum('5', '3')).toBe(8);
      expect(sum('10', 5)).toBe(15);
    });
  });

  // Error Path Tests
  describe('Error Path', () => {
    test('returns NaN when adding NaN', () => {
      expect(sum(NaN, 5)).toBeNaN();
      expect(sum(10, NaN)).toBeNaN();
      expect(sum(NaN, NaN)).toBeNaN();
    });

    test('throws error for non-numeric string inputs', () => {
      expect(() => sum('abc', 5)).toThrow(TypeError);
      expect(() => sum(10, 'def')).toThrow(TypeError);
      expect(() => sum('abc', 'def')).toThrow(TypeError);
    });

    test('throws error for object inputs', () => {
      expect(() => sum({}, 5)).toThrow(TypeError);
      expect(() => sum(10, [])).toThrow(TypeError);
      expect(() => sum({}, {})).toThrow(TypeError);
    });

    test('throws error when arguments are missing', () => {
      expect(() => sum(5)).toThrow(TypeError);
      expect(() => sum()).toThrow(TypeError);
    });

    test('throws error for boolean inputs', () => {
      expect(() => sum(true, 5)).toThrow(TypeError);
      expect(() => sum(10, false)).toThrow(TypeError);
      expect(() => sum(true, false)).toThrow(TypeError);
    });

    test('throws error for undefined or null inputs', () => {
      expect(() => sum(undefined, 5)).toThrow(TypeError);
      expect(() => sum(10, null)).toThrow(TypeError);
      expect(() => sum(undefined, null)).toThrow(TypeError);
    });

    test('throws error for function inputs', () => {
      expect(() => sum(() => {}, 5)).toThrow(TypeError);
      expect(() => sum(10, () => {})).toThrow(TypeError);
    });

    test('throws error for symbol inputs', () => {
      expect(() => sum(Symbol('test'), 5)).toThrow(TypeError);
      expect(() => sum(10, Symbol('test'))).toThrow(TypeError);
    });

    test('throws error for bigint inputs', () => {
      expect(() => sum(BigInt(10), 5)).toThrow(TypeError);
      expect(() => sum(10, BigInt(5))).toThrow(TypeError);
    });

    test('handles overflow correctly', () => {
      const result = sum(Number.MAX_VALUE, Number.MAX_VALUE);
      expect(result).toBe(Infinity);
    });

    test('handles underflow correctly', () => {
      const result = sum(-Number.MAX_VALUE, -Number.MAX_VALUE);
      expect(result).toBe(-Infinity);
    });
  });
});
